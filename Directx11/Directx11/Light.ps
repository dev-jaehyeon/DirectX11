////////////////////////////////////////////////////////////////////////////////
// Filename: light.ps
////////////////////////////////////////////////////////////////////////////////


/////////////
// GLOBALS //
/////////////
Texture2D shaderTexture : register(t0);
SamplerState SampleType : register(s0);

//We have two new global variables inside the LightBuffer that hold the diffuse color and the direction of the light.
//These two variables will be set from values in the new LightClass object.

cbuffer LightBuffer
{
    float4 ambientColor; //#9
    float4 diffuseColor;
    float3 lightDirection;
    float padding;
};


//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
    float3 normal : NORMAL;
};


////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 LightPixelShader(PixelInputType input) : SV_TARGET
{
    float4 textureColor;
    float3 lightDir;
    float lightIntensity;
    float4 color;


    // Sample the pixel color from the texture using the sampler at this texture coordinate location.
    textureColor = shaderTexture.Sample(SampleType, input.tex);


    //#9 이곳에서 Ambient Color가 설정된다.
    // Set the default output color to the ambient light value for all pixels.
    color = ambientColor;

//This is where the lighting equation that was discussed earlier is now implemented.
//The light intensity value is calculated as the dot product between the normal vector of triangle and the light direction vector.

    // Invert the light direction for calculations.
    lightDir = -lightDirection;

    // Calculate the amount of light on this pixel.
    lightIntensity = saturate(dot(input.normal, lightDir));

    //#9 N dot L이 노말과 라이트의 내적이 0보다 큼을 체크한다. 그러면 diffuse color에 ambient color를 더한다. 그렇지 않다면 더할 필요가 없다.
    //0보다 낮다면 굳이 빛을 계산할 필요가 없다
    if(lightIntensity > 0.0f)
    {
        // Determine the final diffuse color based on the diffuse color and the amount of light intensity.
        color += (diffuseColor * lightIntensity);
    }

//And finally, the diffuse value of the light is combined with the texture pixel value to produce the color result.

    //앰비언트 컬러와 디퓨즈 컬러가 1을 넘을 것이기 때문에 saturate를 해준다.
    // Saturate the final light color.
    color = saturate(color);

    // Multiply the texture pixel and the final diffuse color to get the final pixel color result.
    color = color * textureColor;

    return color;
}